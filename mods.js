// Generated by CoffeeScript 1.7.1
(function() {
  var Mods, async, binary_search_hqs, coffee, hqs, _;

  Mods = (typeof exports !== "undefined" && exports !== null) && exports || (this.Mods = {});

  coffee = require('coffee-script');

  require('coffee-script/register');

  _ = require('underscore');

  async = require('async');

  Mods['processor-quality'] = function(engine) {
    var control, modifier, quality;
    control = engine.state.control();
    quality = 3.4275521095175201e+001 + 3.558806693020045e-001 * control + 3.5279187952857053e-005 * control * control;
    quality *= engine.state.condition();
    modifier = 1.0 - 0.05 * Math.min(Math.max(engine.state.target.level() - engine.state.level(), 0), 5);
    return quality *= modifier;
  };

  hqs = _.times(101, function(percent) {
    return -0.0000056604 * Math.pow(percent, 4) + 0.0015369705 * Math.pow(percent, 3) - 0.1426469573 * Math.pow(percent, 2) + 5.6122722959 * percent - 5.5950384565;
  });

  binary_search_hqs = function(a, b, v) {
    var hq, middle;
    if ((b - a) === 1) {
      hq = ((v - hqs[a]) / (hqs[b] - hqs[a])) + a;
      return hq;
    }
    middle = Math.floor((b - a) / 2.0) + a;
    if (v < hqs[middle]) {
      return binary_search_hqs(a, middle, v);
    } else if (v > hqs[middle]) {
      return binary_search_hqs(middle, b, v);
    } else {
      return middle;
    }
  };

  Mods['processor-hq'] = function(engine) {
    var percent;
    percent = (engine.state.quality() / engine.state.target.quality()) * 100;
    return binary_search_hqs(1, 100, percent);
  };

  Mods['processor-progress'] = function(engine) {
    var craftmanship, diff, modifier, progress;
    craftmanship = engine.state.craftmanship();
    progress = (54 / 256) * craftmanship + (330 / 256);
    diff = engine.state.target.level() - engine.state.level();
    if (diff > 5) {
      diff = 5;
    }
    modifier = 1;
    modifier -= diff > 0 ? 0.10 * diff : diff > -6 ? 0.05 * diff : 0.022 * diff;
    return progress *= modifier;
  };

  Mods['add-quality'] = function(engine, quality) {
    var max;
    quality = Math.round(quality);
    max = engine.state.target.quality();
    return function(akk) {
      return Math.min(max, akk + quality);
    };
  };

  Mods['add-progress'] = function(engine, progress) {
    var max;
    progress = Math.round(progress);
    max = engine.state.target.progress();
    return function(akk) {
      return Math.min(max, akk + pogress);
    };
  };

  Mods['use-capacity'] = function(engine) {
    var capacity;
    capacity = engine.values.capacity();
    return function(akk) {
      return Math.max(0, akk - capacity);
    };
  };

  Mods['add-capacity'] = function(engine, capacity) {
    var max;
    max = engine.state.target.capacity();
    return function(akk) {
      return Math.min(max, akk + capacity);
    };
  };

  Mods['add-success'] = function(engine, success) {
    return function(akk) {
      return akk * success;
    };
  };

  Mods['sub-cp'] = function(engine, cp) {
    return function(akk) {
      return akk - cp;
    };
  };

  Mods['add-cp'] = function(engine, cp) {
    var max;
    max = engine.state.cp.base;
    return function(akk) {
      return Math.min(max, akk + cp);
    };
  };

}).call(this);
